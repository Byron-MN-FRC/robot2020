// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.BallShooterConstants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class BallShooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX shootOne;
private WPI_TalonFX shootTwo;
private WPI_TalonSRX gateMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public final SupplyCurrentLimitConfiguration currentLimiting = new SupplyCurrentLimitConfiguration(
            BallShooterConstants.kEnableCurrentLimiting_BS, BallShooterConstants.currentLimit,
            BallShooterConstants.thresholdLimit, BallShooterConstants.thresholdTime);
    private double masterShootRPM = 0;
    public BallShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
shootOne = new WPI_TalonFX(13);
 
 

shootTwo = new WPI_TalonFX(6);
 
 

gateMotor = new WPI_TalonSRX(15);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void shootOneConfig() {
        /* Factory Default all hardware to prevent unexpected behaviour */
        shootOne.configFactoryDefault();

        /* Config neutral deadband to be the smallest possible */
        shootOne.configNeutralDeadband(0.001);

        /* Config sensor used for Primary PID [Velocity] */
        shootOne.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor,
                BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kTimeoutMs);

        /* Config the peak and nominal outputs */
        shootOne.configNominalOutputForward(0, BallShooterConstants.kTimeoutMs);
        shootOne.configNominalOutputReverse(0, BallShooterConstants.kTimeoutMs);
        shootOne.configPeakOutputForward(1, BallShooterConstants.kTimeoutMs);
        shootOne.configPeakOutputReverse(-1, BallShooterConstants.kTimeoutMs);

        /* Config the Velocity closed loop gains in slot0 */
        shootOne.config_kF(BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kGains_shootOne.kF,
                BallShooterConstants.kTimeoutMs);
        shootOne.config_kP(BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kGains_shootOne.kP,
                BallShooterConstants.kTimeoutMs);
        shootOne.config_kI(BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kGains_shootOne.kI,
                BallShooterConstants.kTimeoutMs);
        shootOne.config_kD(BallShooterConstants.kPIDLoopIdx, BallShooterConstants.kGains_shootOne.kD,
                BallShooterConstants.kTimeoutMs);
        /*
         * Talon FX does not need sensor phase set for its integrated sensor This is
         * because it will always be correct if the selected feedback device is
         * integrated sensor (default value) and the user calls getSelectedSensor* to
         * get the sensor's position/velocity.
         * 
         * https://phoenix-documentation.readthedocs.io/en/latest/ch14_MCSensor.html#
         * sensor-phase
         */
        // shootOne.setSensorPhase(true);

        // Ramp motor w/ current limiting on
        shootOne.configSupplyCurrentLimit(currentLimiting);
         }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setMasterShootVelocity(double rpms) {
        if (rpms == 0) {
            shootOne.set(ControlMode.PercentOutput, rpms);
        } else {
            // shootOne.set(ControlMode.Velocity, rpmToVelocityPer100ms(rpms));
        }
    }
}

