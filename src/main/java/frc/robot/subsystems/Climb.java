// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;


import edu.wpi.first.wpilibj.Joystick;

import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.RobotContainer;


/**
 *
 */
public class Climb extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

private WPI_TalonSRX leftShoulder;
private CANSparkMax leftElbow;
private WPI_TalonSRX rightShoulder;
private CANSparkMax rightElbow;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private double BisepActuater;
private double ElbowAngle;
private double ElbowTarget;
private double ShoulderAngle;
private double ShoulderTarget;
private double ForearmActuater;
public boolean shoulderAngleHit;
public boolean elbowAngleHit;

    /**
    *
    */
    public Climb() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftShoulder = new WPI_TalonSRX(12);
 
 

// leftElbow = new WPI_TalonFX(20);
 
 

rightShoulder = new WPI_TalonSRX(7);
 
 

// rightElbow = new WPI_TalonFX(13);
 
 


 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    leftElbow = new CANSparkMax(20, MotorType.kBrushless);

   
    rightElbow = new CANSparkMax(13, MotorType.kBrushless);
    }
    public boolean climbMode = false;
    
    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        //SmartDashboard.putBoolean("ClimbHardStop", leftHardStop.get());
       
        SmartDashboard.putBoolean("Climb Mode", climbMode);
        SmartDashboard.putNumber("Pigeon Pitch", RobotContainer.getInstance().m_drive.getPigeonPitch());
        // SmartDashboard.putNumber("leftEncoder", leftElbow.getSelectedSensorPosition());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void setupClimbMotors(){
        rightElbow.follow(leftElbow);
        // rightElbow.follow(leftElbow, FollowerType.PercentOutput);
        rightElbow.setInverted(true);
    }
    public void shoulderMove(){
       
            startLeftShoulder(.25);
      

    }
    public void elbowMove(){
        
            startLeftElbow(.25);
      
       
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
   
    // public void leftArmMath(double BarX, double BarY) {
    //     ElbowAngle = leftElbowEncoder.get();
    //     //ShoulderAngle = shoulderPtLeft.get();
    //     // Calculates the angle that the elbow needs to be at
    //     ElbowTarget = Math.acos(((Constants.bicepLenght*Constants.bicepLenght)+(Constants.forearmLength*Constants.forearmLength)-(BarY*BarY)-(BarX*BarX))/(2*Constants.forearmLength*Constants.bicepLenght));
    //     // Calculates the angle that the shoulder needs to be at
    //     ShoulderTarget = 180-(Math.asin((Math.sin(ElbowTarget)*Constants.forearmLength)/(Math.pow(BarX*BarX*BarY*BarY, .5))))-Math.atan(BarY/BarX);
    // }
    
   
   
   
   
    public void startLeftElbow(double speed) {
        // if ((speed>=0) && (!isLeftElbow())) {speed = 0;}
        // if ((speed<=0) && (leftElbowEncoder.get() <= -.38)){speed=0;}
        
        leftElbow.set(speed);
    }
    public void startLeftShoulder(double speed) {
        // if ((speed>=0) && (isLeftShoulder())) {speed = 0;}
        // System.out.println("shoulderSpeed "+ speed);
        leftShoulder.set(speed);
    }
    public void startRightElbow(double speed) {
        rightElbow.set(speed);
    }
    public void startRightShoulder(double speed){
        rightShoulder.set(speed);
    }
    public void stopLeftElbow() {
        leftElbow.stopMotor();
    }
    public void stopLeftShoulder() {
        leftShoulder.stopMotor();
    }
    public void stopRightElbow(){
        rightElbow.stopMotor();
    }
    public void stopRightShoulder(){
        rightShoulder.stopMotor();
    }
    
    
    public void manualClimber(Joystick joystickP1){    
        if (climbMode){

        // if (joystickP1.getPOV() != -1){
        //     rightElbow
        // }
        // If moving toward limit switch & it is tripped stop,
        // but allow to go other direction
        double x = -joystickP1.getX();
        if ((x<=.05)&&(x>=-.05)){x=0;}
        // if ((x > 0 && isLeftShoulder())||x<.02) { x = 0; }
        // if ((x > 0 && !isLeftShoulder())) { x = 0; }
        // If moving toward limit switch & it is tripped stop,
        // but allow to go other direction
        double y = -joystickP1.getY();
        // if (y > 0 && !isLeftElbow()) { y = 0; }
        if ((y<=.05)&&(y>=-.05)){y=0;}
        //stops elbow if it opens too far
        // if (((y < 0) && (elbowEncoder()) <= -0.411)){ y=0;} 
        // Adjust speed allow drivers to use 
        // if (x > .9) {x=.9;}
        // if(x< -.9) {x=-.9;}
        // if(y> .4) {y=.4;}
        // if(y< -.4) {y=-.4;}
        startLeftElbow(y);
        startLeftShoulder(x);
        
        }
        else if (joystickP1.getPOV()==0){
            startRightElbow(.4);
        }
        else if (joystickP1.getPOV()==180){
            startRightElbow(-.4);
        }
        else {
            startLeftElbow(0);
            startLeftShoulder(0);
        }
    }
    public void enableClimbMode(){

    }
    public void balanceWithPigeon(){
        double speed = (RobotContainer.getInstance().m_drive.getPigeonPitch() / -(30));
        if (speed >= .25){speed =.25;}
        if (speed <= -.25){speed = -.25;}

        System.out.println("currentAngle"+(RobotContainer.getInstance().m_drive.getPigeonPitch()));
        System.out.println("speed"+speed);
        startLeftShoulder(speed);
    }
    public void manualClimbOff(){
        climbMode=false;
    }
    public void povClimb(boolean inverse){
        double direction = 0;
        if (climbMode) {
         if (inverse){
             direction = -1;
         }else{
                direction = 1;
            }
        }
        
        rightElbow.set(.5*direction);
    }
}
    
