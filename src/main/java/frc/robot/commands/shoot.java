// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.BallShooterConstants;
import frc.robot.LimelightUtility;
import frc.robot.RobotContainer;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import frc.robot.subsystems.BallIndexer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.BallShooter;
/**
 *
 */
public class shoot extends CommandBase {
    double area = 250;
    double rpms = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final BallShooter m_ballShooter;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        // private  BallIndexer m_BallIndexer;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public shoot(BallShooter subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_ballShooter = subsystem;
        addRequirements(m_ballShooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
     
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
         // Refresh limelight data
         LimelightUtility.RefreshTrackingData();
        
         // Lookup optimal RPMS & Hood encoder units based on area (if target seen)
         if (LimelightUtility.ValidTargetFound()) {
            area = LimelightUtility.TargetAreaPercentage * 100; 
        } else {
           System.out.println("No target");
            area = 60;
        }  
        rpms = BallShooterConstants.targetPercent2ShooterParms.floorEntry((int)area).getValue()[0];
        
   
//          // Disable auto indexing 
         
  
     }
 
    
    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

       
        if (BallIndexer.topSensor.get())  {    
            if (RobotContainer.getInstance().m_ballShooter.ready2Shoot(4300 )) {
                    BallIndexer.shootyMode = true;
                //    m_ballShooter.shoot();
            }
        }   

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

        m_ballShooter.stopMotor();
       BallIndexer.shootyMode= false;   
       rpms = 0;    
        // BallIndexer.stopIndexer();
   }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
