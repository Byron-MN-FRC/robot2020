// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.AutonomousCommand;
import frc.robot.commands.acquire;
import frc.robot.commands.alexaFindBall;
import frc.robot.commands.deployAcquisition;
import frc.robot.commands.driveWithJoystick;
import frc.robot.commands.enableClimb;
import frc.robot.commands.enableLimeLight;
import frc.robot.commands.manualMagazineDown;
import frc.robot.commands.manualMagazineUp;
import frc.robot.commands.retractAcquisition;
import frc.robot.commands.reverveAcquire;
import frc.robot.commands.startShootMotors;
import frc.robot.subsystems.Acquisition;
import frc.robot.subsystems.Climb;
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Magazine;
import frc.robot.subsystems.ShootProtoType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final ShootProtoType m_shootProtoType = new ShootProtoType();
    public final Magazine m_magazine = new Magazine();
    public final Drive m_drive = new Drive();
    public final Climb m_climb = new Climb();
    public final Acquisition m_acquisition = new Acquisition();

// Joysticks
private final Joystick joystick2 = new Joystick(1);
private final Joystick joystick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("autonomousCommand", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drive.setDefaultCommand(new driveWithJoystick( m_drive ) );


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("$command.getName()", new ${name.replace(' ', '')}( m_${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')} ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton enableClimb2 = new JoystickButton(joystick2, 7);        
enableClimb2.whenPressed(new enableClimb( m_climb ) ,true);
    SmartDashboard.putData("EnableClimb2",new enableClimb( m_climb ) );

final JoystickButton deployAcquisition2 = new JoystickButton(joystick2, 6);        
deployAcquisition2.whenPressed(new deployAcquisition( m_acquisition ) ,true);
    SmartDashboard.putData("DeployAcquisition2",new deployAcquisition( m_acquisition ) );

final JoystickButton retractAcquisition2 = new JoystickButton(joystick2, 4);        
retractAcquisition2.whenPressed(new retractAcquisition( m_acquisition ) ,true);
    SmartDashboard.putData("RetractAcquisition2",new retractAcquisition( m_acquisition ) );

final JoystickButton manualMagazineDown = new JoystickButton(joystick2, 5);        
manualMagazineDown.whenPressed(new manualMagazineDown( m_magazine ) ,true);
    SmartDashboard.putData("ManualMagazineDown",new manualMagazineDown( m_magazine ) );

final JoystickButton manualMagazineUp = new JoystickButton(joystick2, 3);        
manualMagazineUp.whenPressed(new manualMagazineUp( m_magazine ) ,true);
    SmartDashboard.putData("ManualMagazineUp",new manualMagazineUp( m_magazine ) );

final JoystickButton enableLimelight = new JoystickButton(joystick2, 2);        
enableLimelight.whenPressed(new enableLimeLight( m_shootProtoType ) ,true);
    SmartDashboard.putData("EnableLimelight",new enableLimeLight( m_shootProtoType ) );

final JoystickButton startShoot = new JoystickButton(joystick2, 1);        
startShoot.whileHeld(new startShootMotors( m_shootProtoType ) ,true);
    SmartDashboard.putData("startShoot",new startShootMotors( m_shootProtoType ) );

final JoystickButton enableClimb = new JoystickButton(joystick, 7);        
enableClimb.whenPressed(new enableClimb( m_climb ) ,true);
    SmartDashboard.putData("EnableClimb",new enableClimb( m_climb ) );

final JoystickButton deployAcquisition = new JoystickButton(joystick, 6);        
deployAcquisition.whenPressed(new deployAcquisition( m_acquisition ) ,true);
    SmartDashboard.putData("DeployAcquisition",new deployAcquisition( m_acquisition ) );

final JoystickButton retractAcquisition = new JoystickButton(joystick, 4);        
retractAcquisition.whenPressed(new retractAcquisition( m_acquisition ) ,true);
    SmartDashboard.putData("RetractAcquisition",new retractAcquisition( m_acquisition ) );

final JoystickButton acquire = new JoystickButton(joystick, 5);        
acquire.whenPressed(new acquire( m_acquisition ) ,true);
    SmartDashboard.putData("Acquire",new acquire( m_acquisition ) );

final JoystickButton reverseAcquire = new JoystickButton(joystick, 3);        
reverseAcquire.whenPressed(new reverveAcquire( m_acquisition ) ,true);
    SmartDashboard.putData("ReverseAcquire",new reverveAcquire( m_acquisition ) );

final JoystickButton findBall = new JoystickButton(joystick, 1);        
findBall.whenPressed(new alexaFindBall( m_drive ) ,true);
    SmartDashboard.putData("FindBall",new alexaFindBall( m_drive ) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getjoystick() {
        return joystick;
    }

public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

